generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  VENDOR
  USER
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  DEACTIVATED
}

enum VendorStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum AddressType {
  HOME
  WORK
  OTHER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  RAZORPAY
  PAYPAL
  PAYTM
  OTHER
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  UPI
  WALLET
  NET_BANKING
  COD
  OTHER
}

enum ProductType {
  PARENT
  VARIANT
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum PromotionType {
  DISCOUNT_CODE
  AUTOMATIC_DISCOUNT
  BUNDLE_OFFER
  SEASONAL_SALE
}

enum PromotionStatus {
  DRAFT
  ACTIVE
  PAUSED
  EXPIRED
  CANCELLED
}


model Category {
  id            String     @id @default(uuid())
  name          String     
  description   String?    @db.Text
  slug          String     @unique
  image         String?
  level        Int        @default(0) // 0 for root categories, 1 for subcategories,  last 2 .
  is_featured   Boolean    @default(false)
  active        Boolean    @default(true)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt

  // Parent-Child relationship
  parent_id     String?                                     
  parent        Category?   @relation("CategoryHierarchy", fields: [parent_id], references: [id], onDelete: SetNull)
  children      Category[]  @relation("CategoryHierarchy")   

  // Products
  products      Product[]
  
  // Attributes associated with this category
  attributes    CategoryAttribute[]
}

model CategoryAttribute {
  category_id   String
  attribute_id  String
  required      Boolean  @default(false)  // Add this field for validation purposes

  category      Category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  attribute     Attribute @relation(fields: [attribute_id], references: [id], onDelete: Cascade)

  @@id([category_id, attribute_id])
}

// Attribute model for flexible product attributes
model Attribute {
  id           String         @id @default(uuid())
  name         String         @unique
  description  String?        @db.Text
  type         String         @default("string") // string, number, boolean, date
  values       AttributeValue[]
  
  // Categories that use this attribute
  categories   CategoryAttribute[]

  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
}

model AttributeValue {
  id            String     @id @default(uuid())
  attribute_id  String
  value         String
  display_value String?
  
  attribute     Attribute  @relation(fields: [attribute_id], references: [id], onDelete: Cascade)
  
  products      ProductAttributeValue[]

  @@unique([attribute_id, value])
}

model ProductAttributeValue {
  product_id         String
  attribute_value_id String
  
  product        Product        @relation(fields: [product_id], references: [id], onDelete: Cascade)
  attributeValue AttributeValue @relation(fields: [attribute_value_id], references: [id], onDelete: Cascade)
  
  @@id([product_id, attribute_value_id])
}

model Users {
  id                          String          @id @default(uuid())
  name                        String
  email                       String          @unique
  username                    String?         @unique
  profile_picture             String?
  roles                       Roles[]
  password                    String
  account_status              AccountStatus   @default(ACTIVE)
  verification_code           String?
  incorect_attempt            Int?
  retry_timestamp             DateTime?
  vefification_hash           String?         @unique
  verification_code_expire_at DateTime?
  is_verified                 Boolean  
  
  // Relationships
  Sessions                    Sessions[]
  Addresses                   Address[]
  Orders                      Order[]
  CartItems                   CartItem[]
  Wishlists                   Wishlist[]
  Products                    Product[]       @relation("VendorProducts")
  Reviews                     ProductReview[]
  Vendor                      Vendor?
  Payment                     Payment[]
  ProductHistory              ProductHistory[]
  Banners                     Banner[]
  Promotions                  Promotion[]
  PromotionUsages             PromotionUsage[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Sessions {
  id            String    @id @default(uuid())
  user_id       String
  token         String    @unique @db.Text
  ip_address    String?
  user_agent    String?   @db.Text
  last_activity DateTime?
  expires_at    DateTime
  created_at    DateTime  @default(now())
  
  Users         Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Vendor {
  id              String       @id @default(uuid())
  user_id         String       @unique
  gst_number      String       @unique
  pan_number      String       @unique
  shop_name       String
  shop_address    String
  phone_number    String
  status          VendorStatus @default(PENDING)
  
  User            Users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Products        Product[]

  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
}

model Address {
  id           String      @id @default(uuid())
  user_id      String
  full_name    String
  phone        String
  pincode      String
  house_no     String
  area         String
  landmark     String?
  city         String
  state        String
  address_type AddressType @default(HOME)

  Users        Users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Orders       Order[]
}

model Product {
  id              String      @id @default(uuid())
  title           String
  description     String
  slug            String      @unique // For SEO-friendly URLs
  sku             String?     // Stock Keeping Unit
  price           Float
  vendor_id       String
  images          String[]    // Array of image URLs
  
  // Product type and parent relationship
  product_type    ProductType @default(PARENT)
  parent_id       String?
  parent          Product?    @relation("ProductHierarchy", fields: [parent_id], references: [id], onDelete: Cascade)
  children        Product[]   @relation("ProductHierarchy")
  
  // Apparel specific fields
  brand           String?
  season          String?     // Summer, Winter, Monsoon, All Season
  weight          Float?      // in grams
  
  // Archiving and soft deletion
  is_active       Boolean     @default(true)
  archived        Boolean     @default(false)
  archived_at     DateTime?
  
  // Category relation
  category_id     String?
  category        Category?   @relation(fields: [category_id], references: [id])
  
  // Product attributes
  attributeValues ProductAttributeValue[]
  
  // Timestamps
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  
  // Relations
  Vendor          Vendor      @relation(fields: [vendor_id], references: [id], onDelete: Cascade)
  OrderItems      OrderItem[]
  CartItems       CartItem[]
  Wishlists       Wishlist[]
  Inventory       Inventory?
  Reviews         ProductReview[]
  Users           Users[]     @relation("VendorProducts")
  History         ProductHistory[]
}

// Simplified inventory model - one per product
model Inventory {
  id                  String    @id @default(uuid())
  product_id          String    @unique
  quantity            Int
  low_stock_threshold Int       @default(10)
  reserved_quantity   Int       @default(0)
  last_updated        DateTime  @default(now())

  Product             Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

// New model for tracking user product visit history
model ProductHistory {
  id          String    @id @default(uuid())
  user_id     String
  product_id  String
  visited_at  DateTime  @default(now())
  
  User        Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Product     Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, product_id]) // Prevent duplicate entries, update visited_at instead
}

model Order {
  id            String      @id @default(uuid())
  user_id       String
  address_id    String
  total_amount  Float
  status        OrderStatus @default(PENDING)
  created_at    DateTime    @default(now())
  
  // Archiving fields
  archived      Boolean     @default(false)
  archived_at   DateTime?
  Users         Users       @relation(fields: [user_id], references: [id])
  Address       Address     @relation(fields: [address_id], references: [id])
  OrderItems    OrderItem[]
  Payment       Payment?
  PromotionUsages PromotionUsage[]
}

model OrderItem {
  id                 String   @id @default(uuid())
  order_id           String
  product_id         String
  quantity           Int
  price              Float    
  
  variation_id       String?
  size               String?
  color              String?
  
  Order              Order    @relation(fields: [order_id], references: [id])
  Product            Product  @relation(fields: [product_id], references: [id])
}


model CartItem {
  id         String   @id @default(uuid())
  user_id    String
  product_id String
  quantity   Int
  Users      Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Wishlist {
  id         String   @id @default(uuid())
  user_id    String
  product_id String

  Users      Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model ProductReview {
  id         String   @id @default(uuid())
  product_id String
  user_id    String
  rating     Int      @default(5) // 1 to 5
  review     String?  @db.Text
  images     String[] // User uploaded images with review
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  Product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  Users      Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([product_id, user_id]) // One review per user per product
}

model Payment {
  id             String          @id @default(uuid())
  order_id       String          @unique
  user_id        String
  provider       PaymentProvider
  payment_id     String          @unique 
  amount         Float
  currency       String          @default("INR")
  status         PaymentStatus   @default(PENDING) 
  method         PaymentMethod?
  created_at     DateTime        @default(now())
  paid_at        DateTime?
  
  Order          Order           @relation(fields: [order_id], references: [id])
  Users          Users           @relation(fields: [user_id], references: [id])
}

model Banner {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  image_url   String
  is_active   Boolean  @default(true)
  sort_order  Int      @default(0)
  created_by  String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Admin who created/updated the banner
  creator     Users    @relation(fields: [created_by], references: [id])
}

model Promotion {
  id              String          @id @default(uuid())
  name            String
  description     String?         @db.Text
  code            String?         @unique // For discount codes
  type            PromotionType
  discount_type   DiscountType
  discount_value  Float           // Percentage or fixed amount
  minimum_amount  Float?          // Minimum order amount
  maximum_uses    Int?            // Total usage limit
  uses_per_user   Int?            // Usage limit per user
  current_uses    Int             @default(0)
  status          PromotionStatus @default(DRAFT)
  starts_at       DateTime
  ends_at         DateTime?
  is_active       Boolean         @default(true)
  created_by      String
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  
  // Relations
  creator         Users           @relation(fields: [created_by], references: [id])
  usage_history   PromotionUsage[]
  applicable_categories String[]    // Category IDs this promotion applies to
  applicable_products   String[]    // Product IDs this promotion applies to
}

model PromotionUsage {
  id            String    @id @default(uuid())
  promotion_id  String
  user_id       String?   // Null for guest users
  order_id      String?   // If applied to an order
  discount_amount Float
  used_at       DateTime  @default(now())
  
  // Relations
  promotion     Promotion @relation(fields: [promotion_id], references: [id], onDelete: Cascade)
  user          Users?    @relation(fields: [user_id], references: [id])
  order         Order?    @relation(fields: [order_id], references: [id])
}
